#if defined __strings_test_included
#endinput
#endif
#define __strings_test_included

enum struct string
{
	char StringValue[2048];
	
	int Size() { return 2048;}

	#include "strings_include"
}

enum struct string_2
{
	char StringValue[2];
	
	int Size() { return 2;}

	#include "strings_include"
}

enum struct string_4
{
	char StringValue[4];
	
	int Size() { return 4;}

	#include "strings_include"
}
enum struct string_6
{
	char StringValue[6];
	
	int Size() { return 6;}

	#include "strings_include"
}
enum struct string_8
{
	char StringValue[8];
	
	int Size() { return 8;}

	#include "strings_include"
}
enum struct string_10
{
	char StringValue[10];
	
	int Size() { return 10;}

	#include "strings_include"
}
enum struct string_12
{
	char StringValue[12];
	
	int Size() { return 12;}

	#include "strings_include"
}
enum struct string_16
{
	char StringValue[16];
	
	int Size() { return 16;}

	#include "strings_include"
}
enum struct string_24
{
	char StringValue[24];
	
	int Size() { return 24;}

	#include "strings_include"
}
enum struct string_32
{
	char StringValue[32];
	
	int Size() { return 32;}

	#include "strings_include"
}
enum struct string_64
{
	char StringValue[64];
	
	int Size() { return 64;}

	#include "strings_include"
}
enum struct string_65
{
	char StringValue[65];
	
	int Size() { return 65;}

	#include "strings_include"
}
enum struct string_100
{
	char StringValue[100];
	
	int Size() { return 100;}

	#include "strings_include"
}
enum struct string_128
{
	char StringValue[128];
	
	int Size() { return 128;}

	#include "strings_include"
}
enum struct string_200
{
	char StringValue[200];
	
	int Size() { return 200;}

	#include "strings_include"
}
enum struct string_255
{
	char StringValue[255];
	
	int Size() { return 255;}

	#include "strings_include"
}
enum struct string_256
{
	char StringValue[256];
	
	int Size() { return 256;}

	#include "strings_include"
}
enum struct string_500
{
	char StringValue[500];
	
	int Size() { return 500;}

	#include "strings_include"
}
enum struct string_512
{
	char StringValue[512];
	
	int Size() { return 512;}

	#include "strings_include"
}
enum struct string_1000
{
	char StringValue[1000];
	
	int Size() { return 1000;}

	#include "strings_include"
}
enum struct string_1024
{
	char StringValue[1024];
	
	int Size() { return 1024;}

	#include "strings_include"
}
enum struct string_2000
{
	char StringValue[2000];
	
	int Size() { return 2000;}

	#include "strings_include"
}
enum struct string_2048
{
	char StringValue[2048];
	
	int Size() { return 2048;}

	#include "strings_include"
}
enum struct string_4000
{
	char StringValue[4000];
	
	int Size() { return 4000;}

	#include "strings_include"
}
enum struct string_4096
{
	char StringValue[4096];
	
	int Size() { return 4096;}

	#include "strings_include"
}
enum struct string_8000
{
	char StringValue[8000];
	
	int Size() { return 8000;}

	#include "strings_include"
}
enum struct string_8192
{
	char StringValue[8192];
	
	int Size() { return 8192;}

	#include "strings_include"
}
enum struct string_10000
{
	char StringValue[10000];
	
	int Size() { return 10000;}

	#include "strings_include"
}
enum struct string_10240
{
	char StringValue[10240];
	
	int Size() { return 10240;}

	#include "strings_include"
}
